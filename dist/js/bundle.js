(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var BASE_WIDTH = 600;
var Event = function Event(start, end) {
  return { start: start, end: end };
};
exports.Event = Event;
var EventGroup = function EventGroup(start, end, events) {
  return { start: start, end: end, events: events };
};
exports.EventGroup = EventGroup;
var RowGroup = function RowGroup(start, end, columns) {
  return { start: start, end: end, columns: columns };
};
exports.RowGroup = RowGroup;
var RenderableEvent = function RenderableEvent(start, end, rowLength, columnIndex) {
  var width = BASE_WIDTH / rowLength;
  return {
    top: start,
    left: width * columnIndex,
    width: width,
    height: end - start
  };
};

exports.RenderableEvent = RenderableEvent;
var sortEvents = function sortEvents(eventList) {
  return eventList.sort(function (eventA, eventB) {
    var startDelta = eventA.start - eventB.start;
    if (startDelta === 0) {
      var endDelta = eventA.end - eventB.end;
      return endDelta === 0 ? 0 : endDelta;
    } else {
      return startDelta;
    }
  });
};

exports.sortEvents = sortEvents;
var groupEventRow = function groupEventRow(eventList) {
  return eventList.reduce(addOrCreateRowGroup, []);
};

exports.groupEventRow = groupEventRow;
var addOrCreateRowGroup = function addOrCreateRowGroup(listOfRowGroups, event) {
  // Group by overlapping events
  var lastGroup = listOfRowGroups[listOfRowGroups.length - 1];
  if (lastGroup && event.start < lastGroup.end) {
    // Add to last group
    lastGroup.events.push(event);
    if (lastGroup.end < event.end) lastGroup.end = event.end;
    return listOfRowGroups;
  } else {
    // Create new group
    return listOfRowGroups.concat([EventGroup(event.start, event.end, [event])]);
  }
};

exports.addOrCreateRowGroup = addOrCreateRowGroup;
var groupEventColumns = function groupEventColumns(eventList) {
  return eventList.reduce(addOrCreateColumnGroup, []);
};

var addOrCreateColumnGroup = function addOrCreateColumnGroup(listOfColumnGroups, event) {
  // Group by non-overlapping events
  var lastGroup = listOfColumnGroups.find(function (columnGroup) {
    return columnGroup.end <= event.start;
  });
  if (lastGroup && event.start >= lastGroup.end) {
    // Add to existing colunm
    lastGroup.events.push(event);
    lastGroup.end = event.end;
    return listOfColumnGroups;
  } else {
    return listOfColumnGroups.concat([EventGroup(event.start, event.end, [event])]);
  }
};

exports.addOrCreateColumnGroup = addOrCreateColumnGroup;
var columnizeEvents = function columnizeEvents(eventGroup) {
  return RowGroup(eventGroup.start, eventGroup.end, groupEventColumns(eventGroup.events));
};

var eventListToRow = function eventListToRow(eventList) {
  return eventList.map(columnizeEvents);
};

exports.eventListToRow = eventListToRow;
// mapCat or flatMap
// Write reduce over rowgroups that produces renderable event list

var rowGroupToRenderableList = function rowGroupToRenderableList(renderableEventsList, rowGroup) {
  var events = [];
  rowGroup.columns.map(function (columnGroup, i) {
    columnGroup.events.map(function (event) {
      events.push(RenderableEvent(event.start, event.end, rowGroup.columns.length, i));
    });
  });

  return renderableEventsList.concat(events);
};

exports.rowGroupToRenderableList = rowGroupToRenderableList;
var flattenRenderableList = function flattenRenderableList(rowGroupList) {
  return rowGroupList.reduce(rowGroupToRenderableList, []);
};

exports.flattenRenderableList = flattenRenderableList;
var createEventEl = function createEventEl(event) {
  var node = document.createElement('div');
  node.className = 'event';
  node.style.cssText = 'top:' + event.top + 'px;' + 'left:' + event.left + 'px;' + 'width:' + event.width + 'px;' + 'height:' + event.height + 'px;';
  return node;
};

var renderEvents = function renderEvents(renderable) {
  var calendar = document.getElementById('cal-container');
  clearCal();
  renderable.forEach(function (renderableEvent) {
    var eventEl = createEventEl(renderableEvent);
    calendar.appendChild(eventEl);
  });
};

exports.renderEvents = renderEvents;
var clearCal = function clearCal() {
  var calendar = document.getElementById('cal-container');
  calendar.innerHTML = '';
};

var flow = function flow() {
  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function (arg) {
    return fns.reduce(function (memo, fn) {
      return fn(memo);
    }, arg);
  };
};

exports.flow = flow;
var layOutDayAlgorithm = flow(sortEvents, groupEventRow, eventListToRow, flattenRenderableList);

exports.layOutDayAlgorithm = layOutDayAlgorithm;
var layOutDay = flow(layOutDayAlgorithm, renderEvents);

exports.layOutDay = layOutDay;
// TODO:
// Start new version to get time complexity down
// Transduce instead of reduce
// Can render row as soon as its finished

},{}],2:[function(require,module,exports){
(function (global){
'use strict';

var _calendar = require('./calendar');

var sampleData = [{ start: 30, end: 150 }, { start: 540, end: 600 }, { start: 560, end: 620 }, { start: 610, end: 670 }];

(0, _calendar.layOutDay)(sampleData);

// renderEvents(layOutDay([Event(0,50), Event(10,20), Event(20,30)]))

global.layOutDay = _calendar.layOutDay;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./calendar":1}],3:[function(require,module,exports){
'use strict';

var _calendar = require('./calendar');

var sampleData = [{ start: 30, end: 150 }, { start: 540, end: 600 }, { start: 560, end: 620 }, { start: 610, end: 670 }];

var assert = function assert(actual, expected, name) {
  if (JSON.stringify(actual) !== JSON.stringify(expected)) {
    console.error(actual, expected);
    throw 'Fail: ' + name;
  }
}

// job of sort:
// - ensure events that start early come before ones that start later
// - and if events start at the same time, then the ones that finish first come first

// sort Tests
;(function () {
  var tests = [{
    given: [(0, _calendar.Event)(0, 2), (0, _calendar.Event)(0, 1)],
    expected: [(0, _calendar.Event)(0, 1), (0, _calendar.Event)(0, 2)]
  }, {
    given: [(0, _calendar.Event)(1, 2), (0, _calendar.Event)(0, 1)],
    expected: [(0, _calendar.Event)(0, 1), (0, _calendar.Event)(1, 2)]
  }];

  tests.forEach(function (test) {
    assert((0, _calendar.sortEvents)(test.given), test.expected);
  });
})();

// addOrCreateRowGroup Tests
(function () {

  var tests = [{
    given: {
      groupList: [],
      event: (0, _calendar.Event)(0, 1)
    },
    expected: [(0, _calendar.EventGroup)(0, 1, [(0, _calendar.Event)(0, 1)])]
  }, {
    given: {
      groupList: [(0, _calendar.EventGroup)(0, 1, [(0, _calendar.Event)(0, 1)])],
      event: (0, _calendar.Event)(0, 2)
    },
    expected: [(0, _calendar.EventGroup)(0, 2, [(0, _calendar.Event)(0, 1), (0, _calendar.Event)(0, 2)])]
  }, {
    given: {
      groupList: [(0, _calendar.EventGroup)(0, 1, [(0, _calendar.Event)(0, 1)])],
      event: (0, _calendar.Event)(1, 2)
    },
    expected: [(0, _calendar.EventGroup)(0, 1, [(0, _calendar.Event)(0, 1)]), (0, _calendar.EventGroup)(1, 2, [(0, _calendar.Event)(1, 2)])]
  }, {
    name: 'add to existing row when large first event',
    given: {
      groupList: [(0, _calendar.EventGroup)(0, 50, [(0, _calendar.Event)(0, 50), (0, _calendar.Event)(10, 20)])],
      event: (0, _calendar.Event)(20, 30)
    },
    expected: [(0, _calendar.EventGroup)(0, 50, [(0, _calendar.Event)(0, 50), (0, _calendar.Event)(10, 20), (0, _calendar.Event)(20, 30)])]
  }];

  tests.forEach(function (test) {
    assert((0, _calendar.addOrCreateRowGroup)(test.given.groupList, test.given.event), test.expected, test.name);
  });
})();

// addOrCreateColumnGroup Tests
(function () {

  var tests = [{
    name: 'creates a new column group',
    given: {
      groupList: [],
      event: (0, _calendar.Event)(0, 1)
    },
    expected: [(0, _calendar.EventGroup)(0, 1, [(0, _calendar.Event)(0, 1)])]
  }, {
    name: 'adds to existing column group when events dont collide',
    given: {
      groupList: [(0, _calendar.EventGroup)(0, 1, [(0, _calendar.Event)(0, 1)])],
      event: (0, _calendar.Event)(1, 2)
    },
    expected: [(0, _calendar.EventGroup)(0, 2, [(0, _calendar.Event)(0, 1), (0, _calendar.Event)(1, 2)])]
  }, {
    name: 'adds to first column group when events dont collide and theres 2 columns',
    given: {
      groupList: [(0, _calendar.EventGroup)(540, 600, [(0, _calendar.Event)(540, 600)]), (0, _calendar.EventGroup)(560, 620, [(0, _calendar.Event)(560, 620)])],
      event: (0, _calendar.Event)(610, 670)
    },
    expected: [(0, _calendar.EventGroup)(540, 670, [(0, _calendar.Event)(540, 600), (0, _calendar.Event)(610, 670)]), (0, _calendar.EventGroup)(560, 620, [(0, _calendar.Event)(560, 620)])]
  }, {
    name: 'creates new column group when events collide',
    given: {
      groupList: [(0, _calendar.EventGroup)(0, 1, [(0, _calendar.Event)(0, 1)])],
      event: (0, _calendar.Event)(0, 2)
    },
    expected: [(0, _calendar.EventGroup)(0, 1, [(0, _calendar.Event)(0, 1)]), (0, _calendar.EventGroup)(0, 2, [(0, _calendar.Event)(0, 2)])]
  }, {
    name: 'multiple existing columns',
    given: {
      groupList: [(0, _calendar.EventGroup)(0, 50, [(0, _calendar.Event)(0, 50)]), (0, _calendar.EventGroup)(10, 20, [(0, _calendar.Event)(10, 20)])],
      event: (0, _calendar.Event)(20, 30)
    },
    expected: [(0, _calendar.EventGroup)(0, 50, [(0, _calendar.Event)(0, 50)]), (0, _calendar.EventGroup)(10, 30, [(0, _calendar.Event)(10, 20), (0, _calendar.Event)(20, 30)])]
  }];

  tests.forEach(function (test) {
    assert((0, _calendar.addOrCreateColumnGroup)(test.given.groupList, test.given.event), test.expected, test.name);
  });
})();

// rowGroupToRenderableList Test
(function () {
  var tests = [{
    name: 'Produces flat renderable event from nested event',
    given: {
      renderableEventsList: [],
      rowGroup: (0, _calendar.RowGroup)(0, 1, [(0, _calendar.EventGroup)(0, 1, [(0, _calendar.Event)(0, 1)])])
    },
    expected: [(0, _calendar.RenderableEvent)(0, 1, 1, 0)]
  }, {
    name: 'add to existing row',
    given: {
      renderableEventsList: [(0, _calendar.RenderableEvent)(0, 1, 1, 0)],
      rowGroup: (0, _calendar.RowGroup)(1, 2, [(0, _calendar.EventGroup)(1, 2, [(0, _calendar.Event)(1, 2)])])
    },
    expected: [(0, _calendar.RenderableEvent)(0, 1, 1, 0), (0, _calendar.RenderableEvent)(1, 2, 1, 0)]
  }, {
    name: 'row with multiple events in a column',
    given: {
      renderableEventsList: [],
      rowGroup: (0, _calendar.RowGroup)(0, 2, [(0, _calendar.EventGroup)(0, 1, [(0, _calendar.Event)(0, 1), (0, _calendar.Event)(1, 2)])])
    },
    expected: [(0, _calendar.RenderableEvent)(0, 1, 1, 0), (0, _calendar.RenderableEvent)(1, 2, 1, 0)]
  }, {
    name: 'row with multiple columns',
    given: {
      renderableEventsList: [],
      rowGroup: (0, _calendar.RowGroup)(0, 2, [(0, _calendar.EventGroup)(0, 1, [(0, _calendar.Event)(0, 1)]), (0, _calendar.EventGroup)(0, 2, [(0, _calendar.Event)(0, 2)])])
    },
    expected: [(0, _calendar.RenderableEvent)(0, 1, 2, 0), (0, _calendar.RenderableEvent)(0, 2, 2, 1)]
  }, {
    name: 'row with multiple columns real example',
    given: {
      renderableEventsList: [],
      rowGroup: (0, _calendar.RowGroup)(540, 670, [(0, _calendar.EventGroup)(540, 670, [(0, _calendar.Event)(540, 600), (0, _calendar.Event)(610, 670)]), (0, _calendar.EventGroup)(560, 620, [(0, _calendar.Event)(560, 620)])])
    },
    expected: [(0, _calendar.RenderableEvent)(540, 600, 2, 0), (0, _calendar.RenderableEvent)(610, 670, 2, 0), (0, _calendar.RenderableEvent)(560, 620, 2, 1)]
  }, {
    name: 'large first column',
    given: {
      renderableEventsList: [],
      rowGroup: (0, _calendar.RowGroup)(0, 50, [(0, _calendar.EventGroup)(0, 50, [(0, _calendar.Event)(0, 50)]), (0, _calendar.EventGroup)(10, 30, [(0, _calendar.Event)(10, 20), (0, _calendar.Event)(20, 30)])])
    },
    expected: [(0, _calendar.RenderableEvent)(0, 50, 2, 0), (0, _calendar.RenderableEvent)(10, 20, 2, 1), (0, _calendar.RenderableEvent)(20, 30, 2, 1)]
  }];

  tests.forEach(function (test) {
    assert((0, _calendar.rowGroupToRenderableList)(test.given.renderableEventsList, test.given.rowGroup), test.expected, test.name);
  });
})();

// layOutDay Test
(function () {
  var tests = [{
    name: 'Renders sample events',
    given: sampleData,
    expected: [(0, _calendar.RenderableEvent)(30, 150, 1, 0), (0, _calendar.RenderableEvent)(540, 600, 2, 0), (0, _calendar.RenderableEvent)(610, 670, 2, 0), (0, _calendar.RenderableEvent)(560, 620, 2, 1)]
  }, {
    name: 'Handles events starting at same time',
    given: [(0, _calendar.Event)(0, 1), (0, _calendar.Event)(0, 1), (0, _calendar.Event)(0, 1)],
    expected: [(0, _calendar.RenderableEvent)(0, 1, 3, 0), (0, _calendar.RenderableEvent)(0, 1, 3, 1), (0, _calendar.RenderableEvent)(0, 1, 3, 2)]
  }, {
    name: 'Large first column',
    given: [(0, _calendar.Event)(0, 50), (0, _calendar.Event)(10, 20), (0, _calendar.Event)(20, 30)],
    expected: [(0, _calendar.RenderableEvent)(0, 50, 2, 0), (0, _calendar.RenderableEvent)(10, 20, 2, 1), (0, _calendar.RenderableEvent)(20, 30, 2, 1)]
  }];

  tests.forEach(function (test) {
    assert((0, _calendar.layOutDayAlgorithm)(test.given), test.expected, test.name);
  });
})();

},{"./calendar":1}]},{},[2,3])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
